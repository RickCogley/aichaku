# Advanced Mermaid Diagram Patterns

## Complex State Machine with Guards and Actions

```mermaid
stateDiagram-v2
    [*] --> Idle
    
    state AuthenticationFlow {
        [*] --> CheckingCredentials
        CheckingCredentials --> Authenticated: valid
        CheckingCredentials --> Failed: invalid
        Failed --> CheckingCredentials: retry < 3
        Failed --> Locked: retry >= 3
        Authenticated --> [*]
        Locked --> [*]
    }
    
    Idle --> AuthenticationFlow: login
    
    state SessionActive {
        [*] --> Active
        Active --> Refreshing: token expiring
        Refreshing --> Active: success
        Refreshing --> Expired: failure
        Active --> Idle: logout
        Expired --> Idle: force logout
        
        state Active {
            [*] --> Normal
            Normal --> Elevated: admin action
            Elevated --> Normal: timeout
        }
    }
    
    AuthenticationFlow --> SessionActive: authenticated
    SessionActive --> Idle: session end
    
    note right of AuthenticationFlow
        Guards:
        - retry < 3
        - valid credentials
        
        Actions:
        - increment retry
        - lock account
        - generate token
    end note
```

## Microservices Saga Pattern

```mermaid
sequenceDiagram
    participant Client
    participant OrderService as Order Service
    participant PaymentService as Payment Service
    participant InventoryService as Inventory Service
    participant ShippingService as Shipping Service
    participant SagaOrchestrator as Saga Orchestrator
    
    Client->>OrderService: Create Order
    OrderService->>SagaOrchestrator: Start Order Saga
    
    activate SagaOrchestrator
    
    %% Happy Path
    SagaOrchestrator->>InventoryService: Reserve Items
    activate InventoryService
    InventoryService-->>SagaOrchestrator: Items Reserved
    deactivate InventoryService
    
    SagaOrchestrator->>PaymentService: Process Payment
    activate PaymentService
    PaymentService-->>SagaOrchestrator: Payment Successful
    deactivate PaymentService
    
    SagaOrchestrator->>ShippingService: Schedule Shipping
    activate ShippingService
    ShippingService-->>SagaOrchestrator: Shipping Scheduled
    deactivate ShippingService
    
    SagaOrchestrator->>OrderService: Complete Order
    OrderService-->>Client: Order Confirmed
    
    deactivate SagaOrchestrator
    
    %% Compensation Path
    Note over SagaOrchestrator: If any step fails, compensate
    
    alt Payment Fails
        SagaOrchestrator->>InventoryService: Release Items
        SagaOrchestrator->>OrderService: Cancel Order
        OrderService-->>Client: Order Failed
    end
```

## Event Sourcing Architecture

```mermaid
graph TB
    subgraph "Write Side"
        CMD[Commands] --> CH[Command Handler]
        CH --> AR[Aggregate Root]
        AR --> EV[Domain Events]
        EV --> ES[(Event Store)]
        ES --> EB[Event Bus]
    end
    
    subgraph "Read Side"
        EB --> P1[Projection 1<br/>User View]
        EB --> P2[Projection 2<br/>Admin Dashboard]
        EB --> P3[Projection 3<br/>Analytics]
        
        P1 --> V1[(View DB 1)]
        P2 --> V2[(View DB 2)]
        P3 --> V3[(Analytics DB)]
    end
    
    subgraph "Query Side"
        QH[Query Handler] --> V1
        QH --> V2
        QH --> V3
        
        API[API Layer] --> QH
    end
    
    subgraph "External Systems"
        EB --> INT[Integration Service]
        INT --> EXT1[External System 1]
        INT --> EXT2[External System 2]
    end
    
    style ES fill:#1976d2,stroke:#0d47a1,color:#ffffff
    style EB fill:#ff6f00,stroke:#e65100,color:#ffffff
```

## Complex Decision Tree with Weighted Scoring

```mermaid
graph TD
    Start[Loan Application] --> Score{Calculate Credit Score}
    
    Score --> S1{Score > 750?}
    Score --> S2{Score 650-750?}
    Score --> S3{Score 550-649?}
    Score --> S4{Score < 550?}
    
    S1 -->|Yes +3| Income{Income Check}
    S2 -->|Yes +2| Income
    S3 -->|Yes +1| Income
    S4 -->|Yes -3| Reject1[Auto Reject]
    
    Income --> I1{Income > 100k?}
    Income --> I2{Income 50-100k?}
    Income --> I3{Income < 50k?}
    
    I1 -->|Yes +2| Debt{Debt Ratio}
    I2 -->|Yes +1| Debt
    I3 -->|Yes -1| Debt
    
    Debt --> D1{Ratio < 30%?}
    Debt --> D2{Ratio 30-50%?}
    Debt --> D3{Ratio > 50%?}
    
    D1 -->|Yes +2| History{Employment History}
    D2 -->|Yes +0| History
    D3 -->|Yes -2| History
    
    History --> H1{> 5 years?}
    History --> H2{2-5 years?}
    History --> H3{< 2 years?}
    
    H1 -->|Yes +1| Calculate[Calculate Total Score]
    H2 -->|Yes +0| Calculate
    H3 -->|Yes -1| Calculate
    
    Calculate --> Final{Total Score}
    Final -->|>= 6| Approve[Approve<br/>Low Rate]
    Final -->|3-5| ApproveHigh[Approve<br/>High Rate]
    Final -->|1-2| Manual[Manual Review]
    Final -->|<= 0| Reject2[Reject]
    
    style Approve fill:#4caf50,stroke:#2e7d32,color:#ffffff
    style ApproveHigh fill:#8bc34a,stroke:#689f38
    style Manual fill:#ff9800,stroke:#f57c00
    style Reject1 fill:#f44336,stroke:#d32f2f,color:#ffffff
    style Reject2 fill:#f44336,stroke:#d32f2f,color:#ffffff
```

## Multi-Region Database Replication

```mermaid
graph TB
    subgraph "US-East-1 (Primary)"
        USE_LB[Load Balancer]
        USE_APP1[App Server 1]
        USE_APP2[App Server 2]
        USE_MASTER[(Master DB<br/>Read/Write)]
        USE_REPLICA1[(Replica 1<br/>Read Only)]
        
        USE_LB --> USE_APP1
        USE_LB --> USE_APP2
        USE_APP1 -.->|Read| USE_REPLICA1
        USE_APP1 -->|Write| USE_MASTER
        USE_APP2 -.->|Read| USE_REPLICA1
        USE_APP2 -->|Write| USE_MASTER
        USE_MASTER -->|Sync| USE_REPLICA1
    end
    
    subgraph "EU-West-1 (Secondary)"
        EUW_LB[Load Balancer]
        EUW_APP1[App Server 1]
        EUW_APP2[App Server 2]
        EUW_REPLICA[(Regional Replica<br/>Read Only)]
        
        EUW_LB --> EUW_APP1
        EUW_LB --> EUW_APP2
        EUW_APP1 -.->|Read| EUW_REPLICA
        EUW_APP2 -.->|Read| EUW_REPLICA
        EUW_APP1 -->|Write| USE_MASTER
        EUW_APP2 -->|Write| USE_MASTER
    end
    
    subgraph "AP-Southeast-1 (Secondary)"
        APS_LB[Load Balancer]
        APS_APP1[App Server 1]
        APS_APP2[App Server 2]
        APS_REPLICA[(Regional Replica<br/>Read Only)]
        
        APS_LB --> APS_APP1
        APS_LB --> APS_APP2
        APS_APP1 -.->|Read| APS_REPLICA
        APS_APP2 -.->|Read| APS_REPLICA
        APS_APP1 -->|Write| USE_MASTER
        APS_APP2 -->|Write| USE_MASTER
    end
    
    USE_MASTER ==>|Async Replication| EUW_REPLICA
    USE_MASTER ==>|Async Replication| APS_REPLICA
    
    subgraph "Disaster Recovery"
        DR[(DR Backup<br/>S3/Glacier)]
    end
    
    USE_MASTER -->|Daily Backup| DR
    
    style USE_MASTER fill:#1976d2,stroke:#0d47a1,color:#ffffff
    style EUW_REPLICA fill:#42a5f5,stroke:#1976d2
    style APS_REPLICA fill:#42a5f5,stroke:#1976d2
    style DR fill:#616161,stroke:#424242,color:#ffffff
```

## Service Mesh with Observability

```mermaid
graph TB
    subgraph "Ingress"
        IG[Ingress Gateway<br/>Istio/Envoy]
    end
    
    subgraph "Service Mesh"
        subgraph "User Service"
            USP[Envoy Proxy]
            US[User Service<br/>v2.1.0]
            USP <--> US
        end
        
        subgraph "Order Service"
            OSP[Envoy Proxy]
            OS1[Order Service<br/>v1.5.0 - 80%]
            OS2[Order Service<br/>v1.6.0 - 20%]
            OSP <--> OS1
            OSP <--> OS2
        end
        
        subgraph "Payment Service"
            PSP[Envoy Proxy]
            PS[Payment Service<br/>v3.0.1]
            PSP <--> PS
        end
    end
    
    subgraph "Observability Stack"
        subgraph "Metrics"
            PROM[Prometheus]
            GRAF[Grafana]
        end
        
        subgraph "Tracing"
            JAEG[Jaeger]
        end
        
        subgraph "Logging"
            ELAS[Elasticsearch]
            KIBA[Kibana]
        end
    end
    
    IG --> USP
    USP --> OSP
    OSP --> PSP
    
    USP -.->|Metrics| PROM
    OSP -.->|Metrics| PROM
    PSP -.->|Metrics| PROM
    
    USP -.->|Traces| JAEG
    OSP -.->|Traces| JAEG
    PSP -.->|Traces| JAEG
    
    US -.->|Logs| ELAS
    OS1 -.->|Logs| ELAS
    OS2 -.->|Logs| ELAS
    PS -.->|Logs| ELAS
    
    PROM --> GRAF
    ELAS --> KIBA
    
    style IG fill:#ff6f00,stroke:#e65100,color:#ffffff
    style PROM fill:#e6522c,stroke:#c73e1d,color:#ffffff
    style JAEG fill:#60bdf4,stroke:#2196f3
    style ELAS fill:#00bfb3,stroke:#00897b
```

## Git Branching Strategy

```mermaid
gitGraph
    commit id: "Initial commit"
    
    branch develop
    checkout develop
    commit id: "Setup dev environment"
    
    branch feature/user-auth
    checkout feature/user-auth
    commit id: "Add login form"
    commit id: "Add JWT auth"
    commit id: "Add tests"
    
    checkout develop
    merge feature/user-auth
    
    branch feature/api-v2
    checkout feature/api-v2
    commit id: "New API structure"
    commit id: "Update endpoints"
    
    checkout develop
    branch release/1.0.0
    checkout release/1.0.0
    commit id: "Bump version"
    commit id: "Update changelog"
    
    checkout main
    merge release/1.0.0 tag: "v1.0.0"
    
    checkout develop
    merge release/1.0.0
    
    checkout main
    branch hotfix/security-patch
    checkout hotfix/security-patch
    commit id: "Fix XSS vulnerability"
    
    checkout main
    merge hotfix/security-patch tag: "v1.0.1"
    
    checkout develop
    merge hotfix/security-patch
    
    checkout feature/api-v2
    commit id: "Add versioning"
    
    checkout develop
    merge feature/api-v2
    
    branch feature/dashboard
    checkout feature/dashboard
    commit id: "Create dashboard UI"
    commit id: "Add charts"
    
    checkout develop
    merge feature/dashboard
```

## Data Pipeline with Error Handling

```mermaid
graph TB
    subgraph "Data Sources"
        S1[API Source]
        S2[File Source]
        S3[Database Source]
        S4[Stream Source]
    end
    
    subgraph "Ingestion Layer"
        IQ[Ingestion Queue]
        S1 --> IQ
        S2 --> IQ
        S3 --> IQ
        S4 --> IQ
    end
    
    subgraph "Processing Pipeline"
        IQ --> VAL{Validation}
        
        VAL -->|Valid| CLEAN[Data Cleaning]
        VAL -->|Invalid| ERR1[Error Queue]
        
        CLEAN --> ENRICH{Enrichment}
        ENRICH -->|Success| TRANS[Transform]
        ENRICH -->|API Fail| RETRY1{Retry?}
        
        RETRY1 -->|Yes| ENRICH
        RETRY1 -->|No| ERR2[Error Queue]
        
        TRANS --> QUALITY{Quality Check}
        QUALITY -->|Pass| ROUTE[Route Data]
        QUALITY -->|Fail| QUARANTINE[Quarantine]
        
        QUARANTINE --> REVIEW[Manual Review]
        REVIEW -->|Fixed| TRANS
        REVIEW -->|Reject| ERR3[Error Queue]
    end
    
    subgraph "Output Layer"
        ROUTE --> DW[(Data Warehouse)]
        ROUTE --> SEARCH[Search Index]
        ROUTE --> CACHE[Cache Layer]
        ROUTE --> NOTIFY[Notifications]
    end
    
    subgraph "Error Handling"
        ERR1 --> ALERT[Alert System]
        ERR2 --> ALERT
        ERR3 --> ALERT
        
        ALERT --> DASH[Error Dashboard]
        ALERT --> SLACK[Slack Alerts]
        ALERT --> TICKET[Ticket System]
    end
    
    style VAL fill:#ffd54f,stroke:#f9a825
    style QUALITY fill:#ffd54f,stroke:#f9a825
    style ERR1 fill:#ef5350,stroke:#c62828,color:#ffffff
    style ERR2 fill:#ef5350,stroke:#c62828,color:#ffffff
    style ERR3 fill:#ef5350,stroke:#c62828,color:#ffffff
    style DW fill:#1976d2,stroke:#0d47a1,color:#ffffff
```

## Complex Authorization Flow

```mermaid
graph TD
    REQ[Request] --> AUTH{Authenticated?}
    
    AUTH -->|No| LOGIN[Redirect to Login]
    AUTH -->|Yes| TOKEN{Valid Token?}
    
    TOKEN -->|No| REFRESH{Refresh Token?}
    TOKEN -->|Yes| ROLE{Check Role}
    
    REFRESH -->|Valid| NEWTOKEN[Issue New Token]
    REFRESH -->|Invalid| LOGIN
    NEWTOKEN --> ROLE
    
    ROLE --> ADMIN{Is Admin?}
    ROLE --> USER{Is User?}
    ROLE --> GUEST{Is Guest?}
    
    ADMIN -->|Yes| ADMINPERM[Check Admin Permissions]
    USER -->|Yes| USERPERM[Check User Permissions]
    GUEST -->|Yes| GUESTPERM[Check Guest Permissions]
    
    ADMINPERM --> RESOURCE{Resource Access?}
    USERPERM --> RESOURCE
    GUESTPERM --> RESOURCE
    
    RESOURCE --> OWNER{Is Owner?}
    RESOURCE --> SHARED{Is Shared?}
    RESOURCE --> PUBLIC{Is Public?}
    
    OWNER -->|Yes| GRANT[Grant Access]
    SHARED -->|Yes| CHECKSHARE{Has Share Permission?}
    PUBLIC -->|Yes| GRANT
    
    OWNER -->|No| DENY[Deny Access]
    SHARED -->|No| DENY
    PUBLIC -->|No| DENY
    
    CHECKSHARE -->|Yes| GRANT
    CHECKSHARE -->|No| DENY
    
    GRANT --> LOG[Log Access]
    DENY --> LOG
    
    LOG --> RESPONSE[Return Response]
    
    style AUTH fill:#ffd54f,stroke:#f9a825
    style TOKEN fill:#ffd54f,stroke:#f9a825
    style ROLE fill:#64b5f6,stroke:#1976d2
    style RESOURCE fill:#64b5f6,stroke:#1976d2
    style GRANT fill:#81c784,stroke:#388e3c
    style DENY fill:#e57373,stroke:#c62828
```

## Kubernetes Network Policy Visualization

```mermaid
graph TB
    subgraph "Internet"
        USER[External Users]
    end
    
    subgraph "Cluster"
        subgraph "Ingress Namespace"
            INGRESS[Nginx Ingress<br/>:80/:443]
        end
        
        subgraph "App Namespace"
            subgraph "Frontend Tier"
                FE1[Frontend-1<br/>:3000]
                FE2[Frontend-2<br/>:3000]
            end
            
            subgraph "API Tier"
                API1[API-1<br/>:8080]
                API2[API-2<br/>:8080]
            end
            
            subgraph "Worker Tier"
                W1[Worker-1<br/>:9000]
                W2[Worker-2<br/>:9000]
            end
        end
        
        subgraph "Data Namespace"
            DB[(PostgreSQL<br/>:5432)]
            REDIS[(Redis<br/>:6379)]
            KAFKA[Kafka<br/>:9092]
        end
        
        subgraph "Monitoring Namespace"
            PROM[Prometheus<br/>:9090]
            GRAF[Grafana<br/>:3000]
        end
    end
    
    USER ==>|HTTPS| INGRESS
    
    INGRESS ==>|"NetworkPolicy:<br/>frontend-ingress"| FE1
    INGRESS ==>|allow :3000| FE2
    
    FE1 ==>|"NetworkPolicy:<br/>api-from-frontend"| API1
    FE2 ==>|allow :8080| API2
    FE1 ==>|allow :8080| API2
    FE2 ==>|allow :8080| API1
    
    API1 ==>|"NetworkPolicy:<br/>db-from-api"| DB
    API2 ==>|allow :5432| DB
    API1 ==>|allow :6379| REDIS
    API2 ==>|allow :6379| REDIS
    
    W1 ==>|"NetworkPolicy:<br/>data-from-workers"| DB
    W2 ==>|allow :5432| DB
    W1 ==>|allow :9092| KAFKA
    W2 ==>|allow :9092| KAFKA
    
    PROM -.->|"NetworkPolicy:<br/>metrics-scrape"| FE1
    PROM -.->|allow :3000/metrics| FE2
    PROM -.->|allow :8080/metrics| API1
    PROM -.->|allow :8080/metrics| API2
    PROM -.->|allow :9000/metrics| W1
    PROM -.->|allow :9000/metrics| W2
    
    style INGRESS fill:#ff6f00,stroke:#e65100,color:#ffffff
    style DB fill:#1976d2,stroke:#0d47a1,color:#ffffff
    style REDIS fill:#dc382d,stroke:#b71c1c,color:#ffffff
    style KAFKA fill:#231f20,stroke:#000000,color:#ffffff
```